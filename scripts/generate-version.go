package main

import (
	"os"
	"os/exec"
	"strings"
	"text/template"
	"time"

	"github.com/pkg/errors"
)

const (
	versionFile = "version/version.go"
)

type Constants struct {
	BuildVersion string
	BuildDate    string
}

func main() {
	// Execute git describe to insert the version identifier.
	version, err := execGitDescribe()
	if err != nil {
		panic(err)
	}

	// Generate go file from template.
	templateContent := `// Code generated by github.com/previousnext/gopher/scripts. DO NOT EDIT.
package version

const (
	BuildDate    = "{{.BuildDate}}"
	BuildVersion = "{{.BuildVersion}}"
)
`
	tmpl, err := template.New("versiongo").Parse(templateContent)
	if err != nil {
		panic(err)
	}

	out, err := os.Create(versionFile)
	if err != nil {
		panic(err)
	}

	err = tmpl.Execute(out, Constants{
		BuildDate:    time.Now().Format(time.RFC3339),
		BuildVersion: version,
	})
	if err != nil {
		panic(err)
	}
}

// execGitDescribe executes git describe and returns the value.
func execGitDescribe() (string, error) {
	out, err := exec.Command("git", "describe", "--tags", "--always").Output()
	if err != nil {
		return "", errors.Wrap(err, "Unable to determine version from git")
	}

	return strings.TrimSpace(string(out)), nil
}
